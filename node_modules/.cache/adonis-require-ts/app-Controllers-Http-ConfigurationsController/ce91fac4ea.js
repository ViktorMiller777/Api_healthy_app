"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Configuration_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Configuration"));
class ConfigurationsController {
    async index({ response }) {
        const configuration = await Configuration_1.default.query()
            .preload('user').preload('tipo_configuracion');
        return response.status(200).send({
            "type": "Exitoso",
            "title": "Recursos encontrados",
            "message": "La lista de recursos de configuraciones ha sido encontrada con exito",
            "data": configuration,
        });
    }
    async store({ request, response }) {
        const body = request.all();
        await request.validate({
            schema: Validator_1.schema.create({
                tipo_configuracion_id: Validator_1.schema.number(),
                data: Validator_1.schema.string(),
                user_id: Validator_1.schema.number()
            }),
            messages: {
                'tipo_configuracion_id.required': 'El tipo de configuracion es obligatorio para crear un recurso de configuracion',
                'data.required': 'La descripcion de la configuracion es obligatoria para crear un recurso de configuracion',
                'user_id.required': 'El id de usuario es obligatorio para crear un recurso de configuracion',
                'user_id.number': 'El id de usuario debe ser un numero entero'
            }
        });
        const configuration = new Configuration_1.default();
        try {
            configuration.data = body.data;
            configuration.tipo_configuracion_id = body.tipo_configuracion_id;
            configuration.user_id = body.user_id;
            await configuration.save();
        }
        catch (error) {
            response.internalServerError({
                "type": "Error",
                "title": "Error de sevidor",
                "message": "Hubo un fallo en el servidor durante el registro de los datos",
                "errors": error
            });
            return;
        }
        response.status(201);
        response.send({
            "type": "Exitoso",
            "title": "Recurso creado",
            "message": "El recurso configuracion ha sido creado exitosamente",
            "data": configuration,
        });
    }
    async show({ params, response }) {
        const configuration = await Configuration_1.default.query()
            .where('id', params.id)
            .preload('user').preload('tipo_configuracion')
            .first();
        if (configuration) {
            response.send({
                "type": "Exitoso",
                "title": "Recurso encontrado",
                "message": "El recurso de configuracion ha sido encontrado con exito",
                "data": configuration,
            });
        }
        else {
            response.notFound({
                "type": "Error",
                "title": "Recurso no encontrado",
                "message": "El recurso de configuracion no pudo encontrarse",
                "errors": []
            });
        }
    }
    async update({ params, request, response }) {
        const body = request.all();
        await request.validate({
            schema: Validator_1.schema.create({
                data: Validator_1.schema.string.nullableAndOptional()
            })
        });
        var configuration = await Configuration_1.default.find(params.id);
        if (!configuration) {
            response.notFound({
                "type": "Error",
                "title": "Recurso no encontrado",
                "message": "El recurso de habito no pudo encontrarse",
                "errors": []
            });
            return;
        }
        try {
            if (body.data) {
                configuration.data = body.data;
            }
            configuration.save();
        }
        catch (error) {
            response.internalServerError({
                "type": "Error",
                "title": "Error de sevidor",
                "message": "Hubo un fallo en el servidor durante el registro de los datos",
                "errors": error
            });
            return;
        }
        response.send({
            "type": "Exitoso",
            "title": "Recurso actualizado",
            "message": "El recurso configuracion ha sido actualizado exitosamente",
            "data": configuration,
        });
    }
    async destroy({ params, response }) {
        const configuration = await Configuration_1.default.query().where('id', params.id).first();
        if (configuration) {
            await configuration.delete();
            response.send({
                "type": "Exitoso",
                "title": "Recurso eliminado",
                "message": "El recurso configuracion ha sido eliminado exitosamente",
                "data": configuration,
            });
        }
        else {
            response.notFound({
                "type": "Error",
                "title": "Recurso no encontrado",
                "message": "El recurso de configuracion no pudo encontrarse",
                "errors": []
            });
        }
    }
}
exports.default = ConfigurationsController;
//# sourceMappingURL=data:application/json;base64,