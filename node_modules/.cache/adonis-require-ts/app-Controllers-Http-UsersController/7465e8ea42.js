"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Mail_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Addons/Mail"));
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const Env_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class UsersController {
    async index({ response }) {
        const users = await User_1.default.query().preload('dispositivo', (habitUser) => {
            habitUser.preload('sensores');
        });
        return response.status(200).send({
            type: 'Success!!',
            title: 'Acceso a lista de usuarios',
            message: 'Lista de usuarios',
            data: users
        });
    }
    async show({ response, params }) {
        const users = await User_1.default.query().where('id', params.id).preload('dispositivo', (dispositivo) => {
            dispositivo.preload('sensores', (sensor) => {
                sensor.preload('sensorType');
            }).preload('tipoDispositivo');
        }).preload('configurations').first();
        if (!users) {
            return response.status(404).send({
                type: 'Error',
                title: 'Error al obtener usuario por identificador',
                message: 'No se encontro usuario con este identificador'
            });
        }
        try {
            return response.status(200).send({
                type: 'Success!!',
                title: 'Mostrar usuario y dispositivo',
                message: 'Usuario',
                data: users
            });
        }
        catch (error) {
            if (error.code === 'E_ROW_NOT_FOUND') {
                return response.status(404).send({
                    type: 'Error',
                    title: 'Error al obtener usuario por identificador',
                    message: 'No se encontro usuario con este identificador',
                    error: error
                });
            }
        }
    }
    async SendCodigo({ response, params }) {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
        const user = await User_1.default.findOrFail(params.id);
        const codigo = this.generateVerificationCode();
        const email = user.email;
        await Mail_1.default.send((message) => {
            message
                .from(Env_1.default.get('SMTP_USERNAME'), 'Healthy App')
                .to(email)
                .subject('Healthy App - Codigo de verifiacion')
                .htmlView('emails/VerificationCode', { codigo });
        });
        user.verificationCode = codigo;
        await user.save();
        return response.status(200).send({
            type: 'Success!!',
            title: 'Codigo de verificacion enviado a tu correo electronico',
        });
    }
    async register({ request, response }) {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
        try {
            const name = request.input('name');
            const lastname = request.input('lastname');
            const email = request.input('email');
            const password = request.input('password');
            const existingUser = await User_1.default.findBy('email', email);
            if (existingUser) {
                return response.status(400).json({
                    type: 'Error',
                    message: 'Error al crear usuario',
                    error: 'Correo electr칩nico ya registrado',
                });
            }
            if (password.length < 8) {
                return response.status(400).json({
                    type: 'Error',
                    message: 'Error al crear usuario',
                    error: 'La contrase침a debe tener al menos 8 caracteres',
                });
            }
            const newUser = new User_1.default();
            newUser.name = name;
            newUser.lastname = lastname;
            newUser.email = email;
            newUser.password = await Hash_1.default.make(password);
            const verificationCode = this.generateVerificationCode();
            newUser.verificationCode = verificationCode;
            await newUser.save();
            const emailData = { code: verificationCode };
            await Mail_1.default.send((message) => {
                message
                    .from(Env_1.default.get('SMTP_USERNAME'), 'Healthy App')
                    .to(email)
                    .subject('Healthy App - Verificaci칩n de cuenta')
                    .htmlView('emails/welcome', emailData);
            });
            const accountSid = Env_1.default.get('TWILIO_ACCOUNT_SID');
            const authToken = Env_1.default.get('TWILIO_AUTH_TOKEN');
            const client = require('twilio')(accountSid, authToken);
            await client.messages.create({
                body: "Gracias por registrarte en HealthyApp :D",
                from: Env_1.default.get('TWILIO_FROM_NUMBER'),
                to: `+528714446301`
            });
            return response.status(201).json({
                type: 'Success!!',
                title: 'Registro correctamente',
                message: 'Usuario registrado correctamente',
                data: {
                    user_id: newUser.id,
                    name: newUser.name,
                    lastname: newUser.lastname,
                    email: newUser.email,
                    message: 'Se ha enviado un codigo de verificacion a tu correo electromico'
                },
            });
        }
        catch (error) {
            return response.status(400).json({
                type: 'Error',
                title: 'Error registrar usuario',
                message: 'Error al crear usuario',
                error: error.message,
            });
        }
    }
    generateVerificationCode() {
        const randomNumber = Math.floor(1000 + Math.random() * 9000);
        return randomNumber.toString();
    }
    async update({ auth, request, response }) {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
        try {
            const user = await User_1.default.query().where('id', auth.user?.id).preload('dispositivo', (dispositivo) => {
                dispositivo.preload('sensores', (sensor) => {
                    sensor.preload('sensorType');
                }).preload('tipoDispositivo');
            }).preload('configurations').first();
            if (!user) {
                return response.status(404).json({
                    type: 'Error',
                    title: 'Usuario no encontrado',
                    message: 'Error al encontrar los datos del usuario',
                    error: []
                });
            }
            const { name, lastname, email } = request.only(['name', 'lastname', 'email']);
            const updates = {};
            if (name !== undefined) {
                updates.name = name;
            }
            if (lastname !== undefined) {
                updates.lastname = lastname;
            }
            if (email !== undefined) {
                updates.email = email;
            }
            await Database_1.default.from('users').where('id', user.id).update(updates);
            const updatedUser = await Database_1.default.from('users').where('id', user.id).first();
            await Mail_1.default.send((message) => {
                message
                    .from(Env_1.default.get('SMTP_USERNAME'), 'Healthy App')
                    .to(user.email)
                    .subject('Healthy App - Personalizacion de cuenta')
                    .htmlView('emails/actualizarUser', { name: updates.name || user.name, lastname: updates.lastname || user.lastname, email: updates.email || user.email });
            });
            return response.status(200).json({
                type: 'Success!!',
                title: 'Datos actualizados',
                message: 'Datos de usuario actualizados',
                data: updatedUser
            });
        }
        catch (error) {
            return response.status(500).json({
                type: 'Error',
                title: 'Error de servidor',
                message: 'Error interno del servidor al actualizar los datos del usuario',
                error: error.message
            });
        }
    }
    async updatePassword({ auth, request, response }) {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
        try {
            const userId = auth.user?.id;
            if (!userId) {
                return response.status(401).json({ error: 'Usuario no autenticado' });
            }
            const user = await User_1.default.query()
                .where('id', userId)
                .preload('dispositivo', (dispositivo) => {
                dispositivo.preload('sensores', (sensor) => {
                    sensor.preload('sensorType');
                }).preload('tipoDispositivo');
            }).preload('configurations').first();
            if (!user) {
                return response.status(404).json({
                    type: 'Error',
                    title: 'Usuario no encontrado',
                    message: 'Error al encontrar los datos del usuario',
                    error: []
                });
            }
            const oldPassword = request.input('oldPassword');
            const newPassword = request.input('newPassword');
            const isPasswordValid = await Hash_1.default.verify(user.password, oldPassword);
            if (!isPasswordValid) {
                return response.status(401).json({ error: 'La contrase침a anterior es incorrecta' });
            }
            if (newPassword.length < 8) {
                return response.status(400).json({ error: 'La nueva contrase침a debe tener al menos 8 caracteres' });
            }
            user.password = await Hash_1.default.make(newPassword);
            await user.save();
            await Mail_1.default.send((message) => {
                message
                    .from(Env_1.default.get('SMTP_USERNAME'), 'Healthy App')
                    .to(user.email)
                    .subject('Healthy App - Recuperacion de Contrase침a')
                    .htmlView('emails/nuevaContrasena', { email: user.email });
            });
            return response.status(200).json({
                type: 'Exitoso!!',
                title: 'Contrase침a actualizada',
                message: 'Contrase침a de usuario actualizada',
                data: user
            });
        }
        catch (error) {
            return response.status(500).json({
                type: 'Error',
                title: 'Error al actualizar contrase침a',
                message: 'Error interno del servidor al actualizar la contrase침a del usuario',
                error: error.message
            });
        }
    }
    async destroy({ response, auth }) {
        try {
            const usuario = auth.user;
            await usuario.delete();
            return response.status(204).send({
                type: 'Exitoso!!',
                title: 'Exito al eliminar usuario',
                message: 'Usuario eliminado exitosamente',
                data: usuario
            });
        }
        catch (error) {
            return response.status(400).send({
                type: 'Error',
                title: 'Error al aliminar usuario',
                message: 'Se produjo un error al eliminar usuario'
            });
        }
    }
    async authLogin({ request, response }) {
        try {
            const user_email = request.input('user_email');
            const password = request.input('password');
            const verificationCode = request.input('verification_code');
            const user = await User_1.default.query()
                .where('email', user_email)
                .where('verification_code', verificationCode)
                .whereNull('deleted_at')
                .first();
            if (!user || user.verificationCode !== verificationCode) {
                return response.status(401).send({
                    type: 'warning',
                    title: 'Datos inv치lidos',
                    message: 'Usuario no verificado o datos incorrectos',
                });
            }
            if (!(await Hash_1.default.verify(user.password, password))) {
                return response.status(401).send({
                    type: 'warning',
                    title: 'Datos inv치lidos',
                    message: 'Contrase침a incorrecta',
                });
            }
            user.verificationCode = null;
            await user.save();
            return response.status(200).json({
                type: 'Exitoso!!',
                title: 'Verificado',
                message: 'Cuenta Verificada Correctamente'
            });
        }
        catch (error) {
            return response.status(400).json({
                type: 'Error',
                title: 'Error de inicio',
                message: 'Error al iniciar sesi칩n',
                error: error.message,
            });
        }
    }
    async logout({ auth, response }) {
        try {
            await auth.logout();
            return response.status(200).send({
                type: 'Exitoso!!',
                title: 'Logout exitoso',
                message: 'Logout exitosamente '
            });
        }
        catch (error) {
            return response.status(200).send({
                type: 'Error',
                title: 'Error al cerrar sesion',
                message: 'Se produjo un error al cerrar sesion'
            });
        }
    }
    async login({ request, auth, response }) {
        try {
            const email = request.input('email');
            const password = request.input('password');
            const user = await User_1.default.query().where('email', email).preload('dispositivo', (dispositivo) => {
                dispositivo.preload('sensores', (sensor) => {
                    sensor.preload('sensorType');
                }).preload('tipoDispositivo');
            }).preload('configurations').first();
            if (!user) {
                return response.status(401).json({ message: 'Usuario no encontrado' });
            }
            const isPasswordValid = await Hash_1.default.verify(user.password, password);
            if (!isPasswordValid) {
                return response.status(401).json({ message: 'Contrase침a incorrecta' });
            }
            if (user.verificationCode !== null) {
                return response.status(401).json({ message: 'El usuario a칰n no est치 verificado. Por favor, verifique su cuenta.' });
            }
            const token = await auth.use('api').generate(user, { expiresIn: '3 days' });
            return response.status(200).json({
                type: 'Exitoso!!',
                title: 'Login exitoso',
                message: 'Login exitosamente',
                data: {
                    token,
                    user,
                },
            });
        }
        catch (error) {
            return response.status(500).json({
                type: 'Error',
                title: 'Error al iniciar sesion',
                message: 'Error al iniciar sesi칩n', error: error.message
            });
        }
    }
    async correorecuperacion({ request, response }) {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
        try {
            const email = request.input('email');
            const user = await User_1.default.query().where('email', email).preload('dispositivo', (dispositivo) => {
                dispositivo.preload('sensores', (sensor) => {
                    sensor.preload('sensorType');
                }).preload('tipoDispositivo');
            }).preload('configurations').first();
            if (!user) {
                return response.status(400).json({
                    message: 'No se encontr칩 un usuario con este correo electr칩nico.',
                });
            }
            const verificationCode = this.generarcodigo();
            user.verificationCode = verificationCode;
            await user.save();
            await Mail_1.default.send((message) => {
                message
                    .from(Env_1.default.get('SMTP_USERNAME'), 'Healthy App')
                    .to(email)
                    .subject('Recuperaci칩n de Contrase침a')
                    .htmlView('emails/recuperacion', { verificationCode });
            });
            return response.status(200).json({
                message: 'Se ha enviado un correo electr칩nico con un c칩digo de recuperaci칩n.',
            });
        }
        catch (error) {
            return response.status(500).json({
                message: 'Error al enviar el correo electr칩nico de recuperaci칩n.',
                error: error.message,
            });
        }
    }
    generarcodigo() {
        const randomNumber = Math.floor(1000 + Math.random() * 9000);
        return randomNumber.toString();
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,